#==================================================================================================
# Sarah Middleton
# Junhyong Kim Lab
# University of Pennsylvania
# Last update: Nov 2016
#==================================================================================================
# step2_classification.py
# Given a .scoremat file (generated by step1_threading.py), outputs fold classifications for each
# sequence using a nearest neighbor (NN) classifier. Sequences with a NN distance of <= 17.5 are
# marked as "high" confidence. All predictions are output to the .fold_preds.txt file. 
# 
# Notes:
# - Requires Numpy and scikit-learn
#
# Usage:
#    python step2_classification.py SCOREMAT
#  
# Usage examples: 
#    python ~/src/step2_classification.py ~/demo/demo.scoremat
#==================================================================================================
import sys, os
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.externals import joblib
from optparse import OptionParser

# parse args
usageMsg = "Usage: %prog SCOREMAT [options]"
parser = OptionParser(usage=usageMsg)

# read/process args
(opts, args) = parser.parse_args()
if len(args) == 1:
	testDataFile = args[0]
else:
	print(">> Missing input file. Use -h for help. Exiting.")
	sys.exit()
scriptDir = os.path.dirname(sys.argv[0])

# parameters
distanceThresh = 17.5

# pickled classifier & data
pickled_knn = '%s/classifier/clf_knn.s20.all.pkl' % scriptDir
pickled_zScaler = '%s/classifier/zScaler.s20.all.pkl' % scriptDir
pickled_codeMap = '%s/classifier/codeToFold.s20.all.pkl' % scriptDir
pickled_foldMap = '%s/classifier/foldToCode.s20.all.pkl' % scriptDir

# load pickled data
clf_knn = joblib.load(pickled_knn)
zScaler = joblib.load(pickled_zScaler)
codeToFold = joblib.load(pickled_codeMap)
foldToCode = joblib.load(pickled_foldMap)

# read in scoremat
test_idList = []
test_data = []
ins = open(testDataFile, 'r')
test_header = ins.readline().rstrip('\r\n').split()
for line in ins:
    lineParts = line.strip('\r\n').split()
    test_idList.append(lineParts[0])
    test_data.append([float(x) for x in lineParts[1:]])
ins.close()

# z-scale data using same parameters as training set
test_data_scaled = zScaler.transform(test_data)

# classify using 1NN
print("Classifying...")
predicted = clf_knn.predict(test_data_scaled)
distToClosest, _ = clf_knn.kneighbors(test_data_scaled, n_neighbors=1)
print("Finished.")
print("")

# separate into "classified" and "not classified"
distToClosest2 = np.array([x[0] for x in distToClosest])
belowThresh = distToClosest2 < distanceThresh
print("%s of %s (%.2f%%) classified with high confidence (NN Dist <= 17.5)" % (sum(belowThresh), len(belowThresh), (float(sum(belowThresh)) / len(belowThresh) * 100)))
print("")

# print results
outfile_preds = "%s.fold_preds.txt" % testDataFile

outs = open(outfile_preds, 'w')
outs.write("SeqID\tPredFold\tNNDistance\tConfidence\n")

for i in range(len(test_idList)):
    seqId = test_idList[i]
    predFold = codeToFold[predicted[i]]
    nndist = distToClosest2[i]
    conf = "Low"
    if nndist <= distanceThresh:
        conf = "High"
        
    outStr = "%s\t%s\t%s\t%s\n" % (seqId, predFold, nndist, conf)
    outs.write(outStr)

outs.close()

print("Fold predictions printed to %s" % outfile_preds)
print("")
